
stm32L4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000468  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ec  080005f4  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005ec  080005ec  000015f4  2**0
                  CONTENTS
  4 .ARM          00000000  080005ec  080005ec  000015f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005ec  080005f4  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ec  080005ec  000015ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005f0  080005f0  000015f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000015f4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008e0  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000248  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00002150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007e  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001228  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000bee  00000000  00000000  000034ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004a54  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00008af0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  00008b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00008d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080005d4 	.word	0x080005d4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	080005d4 	.word	0x080005d4

080001c4 <delay>:
 */

#include "stm32l433xx.h"
#include "stm32l433xx_gpio_driver.h"

void delay(void) {
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
    for(uint32_t i = 0; i < 500000; i++);
 80001ca:	2300      	movs	r3, #0
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e002      	b.n	80001d6 <delay+0x12>
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	3301      	adds	r3, #1
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4a04      	ldr	r2, [pc, #16]	@ (80001ec <delay+0x28>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d9f8      	bls.n	80001d0 <delay+0xc>
}
 80001de:	bf00      	nop
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	0007a11f 	.word	0x0007a11f

080001f0 <main>:

int main(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
    GPIO_Handle_t gpio_led = {0};
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]

    gpio_led.pGPIOx = GPIOB;
 8000200:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <main+0x48>)
 8000202:	607b      	str	r3, [r7, #4]
    gpio_led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000204:	230d      	movs	r3, #13
 8000206:	723b      	strb	r3, [r7, #8]
    gpio_led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000208:	2301      	movs	r3, #1
 800020a:	727b      	strb	r3, [r7, #9]
    gpio_led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800020c:	2302      	movs	r3, #2
 800020e:	72bb      	strb	r3, [r7, #10]
    gpio_led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000210:	2300      	movs	r3, #0
 8000212:	733b      	strb	r3, [r7, #12]
    gpio_led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000214:	2300      	movs	r3, #0
 8000216:	72fb      	strb	r3, [r7, #11]


    GPIO_PClockControl(GPIOB, ENABLE);
 8000218:	2101      	movs	r1, #1
 800021a:	4807      	ldr	r0, [pc, #28]	@ (8000238 <main+0x48>)
 800021c:	f000 f838 	bl	8000290 <GPIO_PClockControl>
    GPIO_Init(&gpio_led);
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f8d2 	bl	80003cc <GPIO_Init>

    while(1) {
        GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000228:	210d      	movs	r1, #13
 800022a:	4803      	ldr	r0, [pc, #12]	@ (8000238 <main+0x48>)
 800022c:	f000 f998 	bl	8000560 <GPIO_TogglePin>
        delay();
 8000230:	f7ff ffc8 	bl	80001c4 <delay>
        GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000234:	bf00      	nop
 8000236:	e7f7      	b.n	8000228 <main+0x38>
 8000238:	48000400 	.word	0x48000400

0800023c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800023c:	480d      	ldr	r0, [pc, #52]	@ (8000274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000240:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000244:	480c      	ldr	r0, [pc, #48]	@ (8000278 <LoopForever+0x6>)
  ldr r1, =_edata
 8000246:	490d      	ldr	r1, [pc, #52]	@ (800027c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000248:	4a0d      	ldr	r2, [pc, #52]	@ (8000280 <LoopForever+0xe>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800024c:	e002      	b.n	8000254 <LoopCopyDataInit>

0800024e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000252:	3304      	adds	r3, #4

08000254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000258:	d3f9      	bcc.n	800024e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025a:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800025c:	4c0a      	ldr	r4, [pc, #40]	@ (8000288 <LoopForever+0x16>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000260:	e001      	b.n	8000266 <LoopFillZerobss>

08000262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000264:	3204      	adds	r2, #4

08000266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000268:	d3fb      	bcc.n	8000262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026a:	f000 f98f 	bl	800058c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026e:	f7ff ffbf 	bl	80001f0 <main>

08000272 <LoopForever>:

LoopForever:
  b LoopForever
 8000272:	e7fe      	b.n	8000272 <LoopForever>
  ldr   r0, =_estack
 8000274:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800027c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000280:	080005f4 	.word	0x080005f4
  ldr r2, =_sbss
 8000284:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000288:	2000001c 	.word	0x2000001c

0800028c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC1_IRQHandler>
	...

08000290 <GPIO_PClockControl>:

/*
 * Peripheral Clock Setup
 */

void GPIO_PClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
    if (enable == ENABLE) {
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d141      	bne.n	8000326 <GPIO_PClockControl+0x96>
        if (pGPIOx == GPIOA) {
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002a8:	d106      	bne.n	80002b8 <GPIO_PClockControl+0x28>
            GPIOA_PCLK_EN();
 80002aa:	4b42      	ldr	r3, [pc, #264]	@ (80003b4 <GPIO_PClockControl+0x124>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ae:	4a41      	ldr	r2, [pc, #260]	@ (80003b4 <GPIO_PClockControl+0x124>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
            GPIOE_PCLK_DI();
        } else if (pGPIOx == GPIOH) {
            GPIOH_PCLK_DI();
        }
    }
}
 80002b6:	e077      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOB) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a3f      	ldr	r2, [pc, #252]	@ (80003b8 <GPIO_PClockControl+0x128>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <GPIO_PClockControl+0x3e>
            GPIOB_PCLK_EN();
 80002c0:	4b3c      	ldr	r3, [pc, #240]	@ (80003b4 <GPIO_PClockControl+0x124>)
 80002c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c4:	4a3b      	ldr	r2, [pc, #236]	@ (80003b4 <GPIO_PClockControl+0x124>)
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002cc:	e06c      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOC) {
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a3a      	ldr	r2, [pc, #232]	@ (80003bc <GPIO_PClockControl+0x12c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_PClockControl+0x54>
            GPIOC_PCLK_EN();
 80002d6:	4b37      	ldr	r3, [pc, #220]	@ (80003b4 <GPIO_PClockControl+0x124>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002da:	4a36      	ldr	r2, [pc, #216]	@ (80003b4 <GPIO_PClockControl+0x124>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002e2:	e061      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOD) {
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a36      	ldr	r2, [pc, #216]	@ (80003c0 <GPIO_PClockControl+0x130>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d106      	bne.n	80002fa <GPIO_PClockControl+0x6a>
            GPIOD_PCLK_EN();
 80002ec:	4b31      	ldr	r3, [pc, #196]	@ (80003b4 <GPIO_PClockControl+0x124>)
 80002ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f0:	4a30      	ldr	r2, [pc, #192]	@ (80003b4 <GPIO_PClockControl+0x124>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002f8:	e056      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOE) {
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a31      	ldr	r2, [pc, #196]	@ (80003c4 <GPIO_PClockControl+0x134>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PClockControl+0x80>
            GPIOE_PCLK_EN();
 8000302:	4b2c      	ldr	r3, [pc, #176]	@ (80003b4 <GPIO_PClockControl+0x124>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000306:	4a2b      	ldr	r2, [pc, #172]	@ (80003b4 <GPIO_PClockControl+0x124>)
 8000308:	f043 0310 	orr.w	r3, r3, #16
 800030c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800030e:	e04b      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOH) {
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a2d      	ldr	r2, [pc, #180]	@ (80003c8 <GPIO_PClockControl+0x138>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d147      	bne.n	80003a8 <GPIO_PClockControl+0x118>
            GPIOH_PCLK_EN();
 8000318:	4b26      	ldr	r3, [pc, #152]	@ (80003b4 <GPIO_PClockControl+0x124>)
 800031a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031c:	4a25      	ldr	r2, [pc, #148]	@ (80003b4 <GPIO_PClockControl+0x124>)
 800031e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000322:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000324:	e040      	b.n	80003a8 <GPIO_PClockControl+0x118>
        if (pGPIOx == GPIOA) {
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800032c:	d106      	bne.n	800033c <GPIO_PClockControl+0xac>
            GPIOA_PCLK_DI();
 800032e:	4b21      	ldr	r3, [pc, #132]	@ (80003b4 <GPIO_PClockControl+0x124>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000332:	4a20      	ldr	r2, [pc, #128]	@ (80003b4 <GPIO_PClockControl+0x124>)
 8000334:	f023 0301 	bic.w	r3, r3, #1
 8000338:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800033a:	e035      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOB) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a1e      	ldr	r2, [pc, #120]	@ (80003b8 <GPIO_PClockControl+0x128>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PClockControl+0xc2>
            GPIOB_PCLK_DI();
 8000344:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <GPIO_PClockControl+0x124>)
 8000346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000348:	4a1a      	ldr	r2, [pc, #104]	@ (80003b4 <GPIO_PClockControl+0x124>)
 800034a:	f023 0302 	bic.w	r3, r3, #2
 800034e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000350:	e02a      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOC) {
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a19      	ldr	r2, [pc, #100]	@ (80003bc <GPIO_PClockControl+0x12c>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PClockControl+0xd8>
            GPIOC_PCLK_DI();
 800035a:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <GPIO_PClockControl+0x124>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035e:	4a15      	ldr	r2, [pc, #84]	@ (80003b4 <GPIO_PClockControl+0x124>)
 8000360:	f023 0304 	bic.w	r3, r3, #4
 8000364:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000366:	e01f      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOD) {
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a15      	ldr	r2, [pc, #84]	@ (80003c0 <GPIO_PClockControl+0x130>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PClockControl+0xee>
            GPIOD_PCLK_DI();
 8000370:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <GPIO_PClockControl+0x124>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000374:	4a0f      	ldr	r2, [pc, #60]	@ (80003b4 <GPIO_PClockControl+0x124>)
 8000376:	f023 0308 	bic.w	r3, r3, #8
 800037a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800037c:	e014      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOE) {
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a10      	ldr	r2, [pc, #64]	@ (80003c4 <GPIO_PClockControl+0x134>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PClockControl+0x104>
            GPIOE_PCLK_DI();
 8000386:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <GPIO_PClockControl+0x124>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038a:	4a0a      	ldr	r2, [pc, #40]	@ (80003b4 <GPIO_PClockControl+0x124>)
 800038c:	f023 0310 	bic.w	r3, r3, #16
 8000390:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000392:	e009      	b.n	80003a8 <GPIO_PClockControl+0x118>
        } else if (pGPIOx == GPIOH) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a0c      	ldr	r2, [pc, #48]	@ (80003c8 <GPIO_PClockControl+0x138>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d105      	bne.n	80003a8 <GPIO_PClockControl+0x118>
            GPIOH_PCLK_DI();
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <GPIO_PClockControl+0x124>)
 800039e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a0:	4a04      	ldr	r2, [pc, #16]	@ (80003b4 <GPIO_PClockControl+0x124>)
 80003a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000
 80003b8:	48000400 	.word	0x48000400
 80003bc:	48000800 	.word	0x48000800
 80003c0:	48000c00 	.word	0x48000c00
 80003c4:	48001000 	.word	0x48001000
 80003c8:	48001c00 	.word	0x48001c00

080003cc <GPIO_Init>:

/*
 * Init and De init
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
    // Configure pin mode
    uint32_t temp = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]

    // Check if its an interrupt mode
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d81f      	bhi.n	8000420 <GPIO_Init+0x54>
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	461a      	mov	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	60fb      	str	r3, [r7, #12]
        // Clear existing type bit
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	2103      	movs	r1, #3
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	4619      	mov	r1, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	400a      	ands	r2, r1
 800040e:	601a      	str	r2, [r3, #0]
        // Set new type bit
        pGPIOHandle->pGPIOx->MODER |= temp;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	6819      	ldr	r1, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	430a      	orrs	r2, r1
 800041e:	601a      	str	r2, [r3, #0]
    else {
        // Interrupt
    }

    // Configure Output type
    temp = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7a1b      	ldrb	r3, [r3, #8]
 8000428:	461a      	mov	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	60fb      	str	r3, [r7, #12]
    // Clear existing speed bits
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	685a      	ldr	r2, [r3, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	4619      	mov	r1, r3
 8000440:	2301      	movs	r3, #1
 8000442:	408b      	lsls	r3, r1
 8000444:	43db      	mvns	r3, r3
 8000446:	4619      	mov	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	400a      	ands	r2, r1
 800044e:	605a      	str	r2, [r3, #4]
    // Set new speed bits
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	6859      	ldr	r1, [r3, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	430a      	orrs	r2, r1
 800045e:	605a      	str	r2, [r3, #4]

    // Configure pin speed
    temp = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	799b      	ldrb	r3, [r3, #6]
 8000468:	461a      	mov	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	791b      	ldrb	r3, [r3, #4]
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	2103      	movs	r1, #3
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	43db      	mvns	r3, r3
 800048a:	4619      	mov	r1, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	400a      	ands	r2, r1
 8000492:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6899      	ldr	r1, [r3, #8]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	609a      	str	r2, [r3, #8]

    // Configure pull-up/pull-down
    temp = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	79db      	ldrb	r3, [r3, #7]
 80004ac:	461a      	mov	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	60fb      	str	r3, [r7, #12]
    // Clear existing PUPD bits
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	2103      	movs	r1, #3
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	4619      	mov	r1, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	400a      	ands	r2, r1
 80004d6:	60da      	str	r2, [r3, #12]
    // Set new PUPD bits
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	68d9      	ldr	r1, [r3, #12]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	60da      	str	r2, [r3, #12]

    // Configure Alternate Functionality
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	795b      	ldrb	r3, [r3, #5]
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d131      	bne.n	8000554 <GPIO_Init+0x188>
        uint8_t temp1, temp2;
        temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; // AFR index (0 for pins 0–7, 1 for 8–15)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	791b      	ldrb	r3, [r3, #4]
 80004f4:	08db      	lsrs	r3, r3, #3
 80004f6:	72fb      	strb	r3, [r7, #11]
        temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; // Bit position within AFRx
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	f003 0307 	and.w	r3, r3, #7
 8000500:	72bb      	strb	r3, [r7, #10]
        // Clear existing AF bits
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	7afa      	ldrb	r2, [r7, #11]
 8000508:	3208      	adds	r2, #8
 800050a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800050e:	7abb      	ldrb	r3, [r7, #10]
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	220f      	movs	r2, #15
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	7afa      	ldrb	r2, [r7, #11]
 8000522:	4001      	ands	r1, r0
 8000524:	3208      	adds	r2, #8
 8000526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // Set new AF value
        pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << ( 4 * temp2 );
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	7afa      	ldrb	r2, [r7, #11]
 8000530:	3208      	adds	r2, #8
 8000532:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7a5b      	ldrb	r3, [r3, #9]
 800053a:	461a      	mov	r2, r3
 800053c:	7abb      	ldrb	r3, [r7, #10]
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	4618      	mov	r0, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	7afa      	ldrb	r2, [r7, #11]
 800054c:	4301      	orrs	r1, r0
 800054e:	3208      	adds	r2, #8
 8000550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <GPIO_TogglePin>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t state) {
    pGPIOx->ODR = state;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
    pGPIOx->ODR ^= (1 << PinNumber);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	78fa      	ldrb	r2, [r7, #3]
 8000572:	2101      	movs	r1, #1
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	405a      	eors	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	615a      	str	r2, [r3, #20]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <__libc_init_array>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	4d0d      	ldr	r5, [pc, #52]	@ (80005c4 <__libc_init_array+0x38>)
 8000590:	4c0d      	ldr	r4, [pc, #52]	@ (80005c8 <__libc_init_array+0x3c>)
 8000592:	1b64      	subs	r4, r4, r5
 8000594:	10a4      	asrs	r4, r4, #2
 8000596:	2600      	movs	r6, #0
 8000598:	42a6      	cmp	r6, r4
 800059a:	d109      	bne.n	80005b0 <__libc_init_array+0x24>
 800059c:	4d0b      	ldr	r5, [pc, #44]	@ (80005cc <__libc_init_array+0x40>)
 800059e:	4c0c      	ldr	r4, [pc, #48]	@ (80005d0 <__libc_init_array+0x44>)
 80005a0:	f000 f818 	bl	80005d4 <_init>
 80005a4:	1b64      	subs	r4, r4, r5
 80005a6:	10a4      	asrs	r4, r4, #2
 80005a8:	2600      	movs	r6, #0
 80005aa:	42a6      	cmp	r6, r4
 80005ac:	d105      	bne.n	80005ba <__libc_init_array+0x2e>
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b4:	4798      	blx	r3
 80005b6:	3601      	adds	r6, #1
 80005b8:	e7ee      	b.n	8000598 <__libc_init_array+0xc>
 80005ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80005be:	4798      	blx	r3
 80005c0:	3601      	adds	r6, #1
 80005c2:	e7f2      	b.n	80005aa <__libc_init_array+0x1e>
 80005c4:	080005ec 	.word	0x080005ec
 80005c8:	080005ec 	.word	0x080005ec
 80005cc:	080005ec 	.word	0x080005ec
 80005d0:	080005f0 	.word	0x080005f0

080005d4 <_init>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr

080005e0 <_fini>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr
